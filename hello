#include <pthread.h>
#include <stdlib.h>
#include <stdio.h>

void* comp(void *arg) {
    printf("Computation\n");
    int num = *((int *)arg);
    printf("Args: %ls", &num);

    return NULL;
}


int main(int argc, char const *argv[])
{
    pthread_t thread1;
    int *num = (int *)234;
    pthread_create(&thread1, NULL, comp, num);
    pthread_join(thread1, NULL);
    return 0;
}


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

#define ROWS 5
#define COLS 5
#define NUM_THREADS 2

int A[ROWS][COLS], B[ROWS][COLS], C[ROWS][COLS];
pthread_mutex_t lock;  // Mutex lock for thread synchronization

// Function for matrix addition (executed by each thread)
void *add_matrices(void *arg) {
    int thread_id = *(int *)arg;

    int start_row = (thread_id * ROWS) / NUM_THREADS;
    int end_row = ((thread_id + 1) * ROWS) / NUM_THREADS;

    for (int i = start_row; i < end_row; i++) {
        for (int j = 0; j < COLS; j++) {
            pthread_mutex_lock(&lock);  // Lock before updating shared matrix
            C[i][j] = A[i][j] + B[i][j];
            pthread_mutex_unlock(&lock);  // Unlock after updating
        }
    }
    return NULL;
}

// Function to print a matrix
void print_matrix(int matrix[ROWS][COLS]) {
    for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLS; j++) {
            printf("%d ", matrix[i][j]);
        }
        printf("\n");
    }
}

int main() {
    pthread_t threads[NUM_THREADS];
    pthread_mutex_init(&lock, NULL);  // Initialize mutex lock

    // Initialize matrices A and B with random values
    for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLS; j++) {
            A[i][j] = rand() % 10;
            B[i][j] = rand() % 10;
        }
    }

    printf("Matrix A:\n");
    print_matrix(A);
    printf("Matrix B:\n");
    print_matrix(B);

    for (int i = 0; i < NUM_THREADS; i++) {
        int *thread_id = malloc(sizeof(int));
        *thread_id = i;
        pthread_create(&threads[i], NULL, add_matrices, thread_id);
    }

    // Wait for all threads to complete
    for (int i = 0; i < NUM_THREADS; i++) {
        pthread_join(threads[i], NULL);
    }

    pthread_mutex_destroy(&lock);  // Clean up the mutex

    printf("Resultant Matrix (A + B):\n");
    print_matrix(C);

    return 0;
}

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

#define ROWS 5
#define COLS 5
#define NUM_THREADS 2

int A[ROWS][COLS], B[COLS][ROWS], C[ROWS][ROWS];
pthread_mutex_t lock;  // Mutex lock for thread synchronization

// Function for matrix multiplication (executed by each thread)
void *multiply_matrices(void *arg) {
    int thread_id = *(int *)arg;

    int start_row = (thread_id * ROWS) / NUM_THREADS;
    int end_row = ((thread_id + 1) * ROWS) / NUM_THREADS;

    for (int i = start_row; i < end_row; i++) {
        for (int j = 0; j < ROWS; j++) {
            int sum = 0;
            for (int k = 0; k < COLS; k++) {
                sum += A[i][k] * B[k][j];
            }
            pthread_mutex_lock(&lock);  // Lock before updating shared matrix
            C[i][j] = sum;
            pthread_mutex_unlock(&lock);  // Unlock after updating
        }
    }
    return NULL;
}

// Function to print a matrix
void print_matrix(int matrix[ROWS][ROWS]) {
    for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < ROWS; j++) {
            printf("%d ", matrix[i][j]);
        }
        printf("\n");
    }
}

int main() {
    pthread_t threads[NUM_THREADS];
    pthread_mutex_init(&lock, NULL);  // Initialize mutex lock

    // Initialize matrices A and B with random values
    for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLS; j++) {
            A[i][j] = rand() % 10;
            B[j][i] = rand() % 10; // Ensure B is transposed for multiplication
        }
    }

    printf("Matrix A:\n");
    print_matrix(A);
    printf("Matrix B:\n");
    print_matrix(B);

    for (int i = 0; i < NUM_THREADS; i++) {
        int *thread_id = malloc(sizeof(int));
        *thread_id = i;
        pthread_create(&threads[i], NULL, multiply_matrices, thread_id);
    }

    // Wait for all threads to complete
    for (int i = 0; i < NUM_THREADS; i++) {
        pthread_join(threads[i], NULL);
    }

    pthread_mutex_destroy(&lock);  // Clean up the mutex

    printf("Resultant Matrix (A * B):\n");
    print_matrix(C);

    return 0;
}
